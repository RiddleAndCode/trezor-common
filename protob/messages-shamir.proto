syntax = "proto2";
package hw.trezor.messages.shamir;

// Sugar for easier handling in Java
option java_package = "com.satoshilabs.trezor.lib.protobuf";
option java_outer_classname = "TrezorMessageShamir";

import "messages-bitcoin.proto";
import "messages-ethereum.proto";

/////////////////////////////////////////////////////////////
// RiddleAndCode                                           //
/////////////////////////////////////////////////////////////
/**
 * Request: Generate PrivateKey, split it and erase.
 */
message GetShamirSecrets {
  repeated EphemeralPack slaves = 1;
  required uint32 num_shares = 2;
  required uint32 necessary_shares = 3;
  required bool generate_new = 4;
  optional string mnemonic = 5;
}

message StoreShamirShare {
  required EphemeralPack master = 1;
  required bytes secret = 2;
  required bytes secret_tag = 3;
  required bytes symmetric_key = 4;
  required bytes symmetric_key_tag = 5;
  required bytes iv = 6;
  required bytes chain_code = 7;
  optional bytes mnemonic_half = 8;
  optional bytes shamir_public_key = 9;
  optional bytes public_key = 10; // only necessary from MD -> TN
}

/**
 * Response: Returns all the secrets.
 */

message ShamirSecrets {
  repeated StoreShamirShare shares = 1;
  required bytes chain_code = 2;
  required bytes root_public_key = 3;
}

message GetShamirShare {
  optional EphemeralPack master = 1;
  optional bool path = 2;
  repeated uint32 start_address_n = 3;         // For generating hardened paths: if not present -> signature purposes
  repeated uint32 end_address_n = 4;     // For generateing hardened paths: if not present -> signature purposes
}

message ShamirShare {
  required EphemeralPack slave = 1;
  required bytes share = 2;
  required bytes share_tag = 3;
  required bytes share_iv = 4;
  required bytes hashed_obj = 5;  
  required bytes hashed_obj_tag = 6;
  required bytes iv = 7;
  required bytes signature = 8;
  required bytes tag = 9;
}

/**
 * Request: Sends shares to generate a key to generate addresses from bulk paths
 */
 message ShamirBulkGetAddress {
  required ShamirShare share = 1;
  required bool first_share = 2 [ default = true ];
  required bool last_share = 3 [ default = false ];
  repeated uint32 start_address_n = 4;
  repeated uint32 end_address_n = 5;
  required string coin_name = 6 [default='Bitcoin'];
  optional bool proof = 7;
}

message ShamirBulkProof{
  required bytes public_key = 1;
  required bytes signature = 2;
}

message ShamirBulkAddresses {
  repeated bytes addresses = 1;
  required bool last = 2 [ default = false ];
  repeated ShamirBulkProof proof = 3;
}

// Expects EphemeralPack
message GenerateEphemeralShamir {
}

/**
 * Request: Sends shares to generate a key to sign a future transaction.
 */
message PrepareShamirSign {
  required ShamirShare share = 1;
  required bool first_share = 2 [ default = true ];
  required bool last_share = 3 [ default = false ];
}

message HashTransaction {
  required bool prep_sig = 1;
  required bool first = 2;
  required string coin_name = 3 [ default = 'Bitcoin' ];
  optional TxAck.TransactionType.TxInputType input = 4;
  optional TxAck.TransactionType.TxOutputType output = 5;
}

message HashEthereumTransaction {
  required bool prep_sig = 1;
  required bool first = 2;
  optional EthereumSignTx tx = 3;
  optional EthereumTxAck data = 4;
}

message HashRippleTransaction {
  required bool prep_sig = 1;
  optional RippleSignTx tx = 2;
}

message HashStellarTransaction {
  required bool prep_sig = 1;
  optional StellarSignTx tx = 2;
}

message CloneShare { repeated bytes public_keys = 1; }

message ReplyCloneShare { 
  required ShamirSecrets share = 1;
  repeated bytes family = 2; }

message ImportShamirFamily {
  repeated bytes family = 1;
}

message SendNextPackage {

}

message PutSeed {
  required bytes seed = 1;
  required bool lock = 2;
}
